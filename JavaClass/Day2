package com.my.base;

import java.lang.ref.Cleaner;
import java.util.Scanner;
import java.util.List;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.LinkedList;


public class IoStream
{
    public static void main(String[] args)
    {
        /*
        *   표준스트림(java.lang)
        *            표준 출력 스트림 (1) : System.out
        *            표준 입력 스트림 (0) : System.in
        *            표준 에러 스트림 (2) : System.err
        * */
        Scanner sc = new Scanner(System.in); // scanner 객체 생성

        System.out.println();
        System.out.println("input : ");
        String str = sc.nextLine();  //키보드에서 문자를 입력받기위한 변수
        System.out.println(str);


        System.out.println("숫자를 입력하세요 ");
        String str2 = sc.nextLine();  //next()는 버퍼를 지우지 못하고 nextLine()은 버퍼를 지우고 가져온다.
        int n = Integer.parseInt(str2);   //string -> int
        System.out.printf("입력한 숫자는 %d 입니다.", n);

             Scanner sc = new Scanner(System.in);
        System.out.println("입력하세요 : ");

        byte b = sc.nextByte(); // byte타입의 입력
        short s= sc.nextShort(); // short타입 입력
        int i = sc.nextInt(); // 정수타입의 입력
        double d = sc.nextDouble(); // 실수타입의 입력
        char c = sc.next().charAt(0); // 문자 타입의 입력

        String str = sc.next();  // 공백을 기준으로 읽어옴
        String str2 = sc.nextLine(); // 개행(줄바꿈문자(enter))을 기준으로 읽어옴

        sc.close(); //명시적으로 입력 스트림을 닫는다.

      
        Scanner sc = new Scanner(System.in);

        System.out.printf("Input Number : "); // printf는 println과 다르게 자동 줄바꿈이 없다.
        int age = sc.nextInt();  // 버퍼에 enter가 남아있다.
        sc.nextLine();  // nextLine()를 호출함으로써 버퍼에 저장된 enter를 가져온다.

        System.out.printf("Input Name : ");
        String name = sc.nextLine();  // 남아있던 enter까지 가져온다.

        System.out.println("Output Number : "+ age);
        System.out.println("Output Name : "+ name);

        sc.close();

          /*
        * 배열(Array)의 특징 : 동일한 자료형의 연속적인 집합, 검색이 빠르다, 중간데이터의 추가와 삭제가 어렵다
        * 리스트(List)의 특징 : 동일한 자료형의 연속적인 집합,
        *                     원소를 삭제했을 때 삭제된 데이터 뒤 원소로 빈틈없이 연속적으로 위치시킨다.(삽입,삭제 쉬움),
        *                     검색이 어렵다.

        * */
        int[] arr = {1, 2, 3, 4, 5}; // 배열 선언과 함께 초기화
        int[] arr2 = new int[]{11, 22, 33, 44, 55};  // 명시적 배열 객체 생성

        int[] arr3 = null; // 동적으로 배열생성
        arr3 = new int[]{12, 13, 14}; //초기화 이후 값 삽입

        int[] arr4 = new int[4];  //배열을 4개 생성하고 0으로 초기화

        System.out.printf("arr 배열 : ");
        for(int i = 0; i < arr.length ; i++)
        {
            System.out.printf("%d ", arr[i]);
        }
        System.out.println();

        System.out.printf("arr2 배열 : ");
        for(int i = 0; i < arr2.length ; i++)
        {
            System.out.printf("%d ", arr2[i]);
        }
        System.out.println();

        System.out.printf("arr3 배열 : ");
        for(int i = 0; i < arr3.length ; i++)
        {
            System.out.printf("%d ", arr3[i]);
        }
        System.out.println();

        System.out.printf("arr4 배열 : ");
        for(int i = 0; i < arr4.length; i++)
        {
            System.out.printf("%d ", arr4[i]);
        }
        System.out.println();

        //문자와 배열 동적할당
        String[] strAry = new String[3];
        strAry[0] = "Java";
        strAry[1] = "Java";
        strAry[2] = new String("Java");

        System.out.println(strAry[0]== strAry[1]); // true
        System.out.println(strAry[1] == strAry[2]); // false
        System.out.println(strAry[1].equals(strAry[2])); //true

        System.out.println(arr);   //배열이름을 출력([I@1be6f5c3) 일종의 해쉬코드
        System.out.println(arr2);
        System.out.println(arr3);

        for(int i = 0; i < strAry.length; i++)
        {
            System.out.println(strAry[i]);
        }

        // 향상된 for문 (forEach)
        // 인덱스 접근이 안된다.
        System.out.println();
        for(String s: strAry){ // 배열의 값을 하나씩 s에 넣어라
            System.out.println(s);
        }
      int[] nums = null;
        nums = new int[]{10, 20, 30, 40};
        int sum = 0;
        int num;
        num = 10;

        for (int i = 0; i < nums.length; i++)
        {
            sum += nums[i];
        }
        System.out.println("for문 : "+ sum);
        sum =0;

        for(int n : nums)
        {
            sum += n;
        }
        System.out.println("forEach문 : " + sum);
        sum = 0;

        int result = add(nums);
        System.out.println("add함수 : "+result);
          /* List - 배열과 반대로 데이터 추가, 삭제가 빠르다. 검색이 늦다. 포인터로 연결한 구조

*    ArrayList :
*               method -  add(E e)	요소를 리스트의 끝에 추가
                          add(int index, E element)	특정 위치에 요소 삽입
                          get(int index)	지정한 인덱스의 요소 반환
                          set(int index, E element)	지정한 위치의 요소를 다른 값으로 변경
                          remove(int index)	인덱스의 요소를 삭제
                          remove(Object o)	특정 객체를 찾아 삭제
                          clear()	리스트의 모든 요소 삭제 (비움)
                          size()	리스트에 저장된 요소의 개수 반환
                          isEmpty()	리스트가 비어 있는지 확인
                          contains(Object o)	특정 요소가 리스트에 포함되어 있는지 확인
                          indexOf(Object o)	특정 요소의 첫 인덱스 반환 (없으면 -1)
                          lastIndexOf(Object o)	특정 요소의 마지막 인덱스 반환
                          toArray()	리스트를 배열로 변환
                          iterator()  리스트의 요소를 반복할 수 있는 이터레이터 반환
*
*/
          List<String> arrayList = new java.util.ArrayList<>(); // import java.util.List;
        arrayList.add("A");
        arrayList.add("B");
        arrayList.add("D");
        System.out.println(arrayList);

        arrayList.add(2, "C");
        System.out.println(arrayList);
           List<Number> linkedList = new LinkedList<>();
      /*
*  LinkedList
*               Method -
                         remove(int index)	인덱스에 해당하는 요소 제거
                         remove(Object o)	해당 객체 제거 (처음 등장하는 것 하나만)
                         removeFirst()	첫 번째 요소 제거
                         removeLast()	마지막 요소 제거
                         clear()	모든 요소 제거
*                        get(int index)	지정된 인덱스의 요소 반환
                         getFirst()	첫 번째 요소 반환
                         getLast()	마지막 요소 반환
                         peek()	첫 요소 반환 (null 반환, 예외 없음)
                         peekFirst()	첫 요소 반환 (peek()과 동일)
                         peekLast()	마지막 요소 반환
*                        poll()	첫 요소 반환 후 제거 (null 반환 가능)
                         pollFirst()	첫 요소 반환 후 제거
                         pollLast()	마지막 요소 반환 후 제거
                         offer(E e)	요소를 리스트의 끝에 추가 (add()와 비슷)
                         offerFirst(E e)	앞에 추가
                         offerLast(E e)	뒤에 추가
                         contains(Object o)	요소 포함 여부 확인
                         size()	요소 개수 반환
                         isEmpty()	비어 있는지 확인
                         indexOf(Object o)	첫 등장 위치 반환
                         lastIndexOf(Object o)	마지막 등장 위치 반환
* */

        linkedList.add(10);
        linkedList.add(20);
        linkedList.add(40);
        System.out.println(linkedList);

        linkedList.add(2,30);
        System.out.println(linkedList);

        System.out.println(linkedList.get(1));
          /*
 Map : Key와 Value가 쌍으로 이루어진 자료구조
       중복을 허락하지 않는다.
       대표적인 구현 클래스 HashMap, LinkedMap, TwinMap이 있다.
       HashMap은 해시테이블을 사용하여 순서를 보장하지 않는다.
       null허용
       사용자 로그인(ID, Password)에 사용됨
* */
       Map<String, Integer> ageMap = new HashMap<>();

        ageMap.put("Alice", 25);
        ageMap.put("Bob", 30);
        ageMap.put("Jane", 28);

        System.out.println(ageMap);
        System.out.printf("Bob의 나이 : ");
        System.out.println(ageMap.get("Bob"));

        ageMap.remove("Jane");  // 키값 "Jane"으로  삭제

        System.out.println(ageMap);
        System.out.println(ageMap.containsKey("Jane")); // "Jane"을 삭제해서 false출력

        ageMap.put(null, 0);  //null키 허용
        System.out.println(ageMap);

        ageMap.put("Jane", 28);
        System.out.println(ageMap);
        ageMap.put("Jane", 28);
        System.out.println(ageMap); //중복키 허용x
/*
    LinkedMap : 입력 순서 유지
                최신정보를 확인할때 등등사용
                null 허용
    */
           Map<String, String> linkedMap = new LinkedHashMap<>();

        linkedMap.put("b", "banana");
        linkedMap.put("a", "apple");
        linkedMap.put("c", "cherry");

        System.out.println(linkedMap); //입력 순서 유지
        linkedMap.put(null, "no");
        System.out.println(linkedMap); //null 허용
          /*
 TreeMap : 오름차순 정렬, 속도가 느림, null 불허
* */
             Map<String, String> treeMap = new TreeMap<>();

        treeMap.put("b", "banana");
        treeMap.put("a", "apple");
        treeMap.put("c", "cherry");

        System.out.println(treeMap);
        treeMap.put(null, "NO");
        System.out.println(treeMap);

          
        System.out.println(CoffeeType.AMERICANO);
        System.out.println(CoffeeType.ICE_AMERICANO);
        System.out.println(CoffeeType.CAFE_LATTE);
        System.out.println();

        for(CoffeeType t : CoffeeType.values())
        {
            System.out.println(t);
        }
     Set<String> set = new HashSet<>();
        set.add("apple");
        set.add("banana");
        set.add("apple");

        System.out.println(set);
           String[] names = {"Alice", "Bob", "Alice", "Jane"};
       Set<String> uniqueNames = new HashSet<>(Arrays.asList(names));
        System.out.println(uniqueNames); // 중복이 출력안됨

        Set<Integer> numbers = new TreeSet<>();
        numbers.add(5);
        numbers.add(1);
        numbers.add(7);
        numbers.add(9);
        numbers.add(5);
        System.out.println(numbers); //중복이 출력안되고 정렬되어 출력
            String str = "Hello-Java";

        System.out.println(str);
        System.out.println(str.length()); // 값 : 10, 문자열 길이 반환.

        System.out.println(str.charAt(6)); // 값 : J, index중 6번째 값을 가져옴
        System.out.println(str.replace("H", "h")); // H -> h
        System.out.println(str.substring(0,4)); // 출력 : Hell, 0번부터 3번째 index를 가져옴

        String[] tokens = str.split("-");
        System.out.println(tokens[1]);  // 출력 : Java, "-"기준으로 문자열 구분하여 반환
        System.out.println(tokens[0]);  // 출력 : Hello

           Human h = new Human(); // new연산자는 객체를 생성한 후 생성자를 초기화하고 객체의 주소를 리턴

        System.out.println(System.identityHashCode(h)); // 객체가 생성됨을 확인
        System.out.println(h.Name);


              
    }
      String a = "AMERICANO";
    enum CoffeeType { // enum 열거형 타입의 자료형
        AMERICANO,
        ICE_AMERICANO,
        CAFE_LATTE
    }
     public static int add( int[] ary)
    {   // add 메소드
        int res = 0;
        for(int n : ary)
        {
            res +=n;
        }
         return res;
    }
class Human
{
    String Name; // 필드 = 멤버 변수 = 속성
}
class Human2
{
 /* 필드 == 속성 */
 private String name;

 /* 메소드 == 기능 */
 public void setName(){

 }
 public void getName(){
     System.out.println(name);
 }
}






    }
}
